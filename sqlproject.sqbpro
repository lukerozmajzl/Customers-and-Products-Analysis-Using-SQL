<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/luker/Downloads/stores.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3839"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="products" custom_title="0" dock_id="1" table="4,8:mainproducts"/><dock_state state="000000ff00000000fd00000001000000020000043c000002b6fc0100000001fb000000160064006f0063006b00420072006f007700730065003101000000000000043c0000012400ffffff000002580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="104"/><column index="2" value="273"/><column index="3" value="124"/><column index="4" value="106"/><column index="5" value="148"/><column index="6" value="257"/><column index="7" value="195"/><column index="8" value="140"/><column index="9" value="109"/><column index="10" value="78"/><column index="11" value="101"/><column index="12" value="158"/><column index="13" value="68"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="79"/><column index="2" value="300"/><column index="3" value="132"/><column index="4" value="80"/><column index="5" value="202"/><column index="6" value="300"/><column index="7" value="98"/><column index="8" value="56"/><column index="9" value="54"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">--Table information
SELECT
  'Customers' AS table_name,
  13 AS number_of_attributes,
  (SELECT COUNT(*) FROM customers) AS number_of_rows
UNION ALL
SELECT
  'Products' AS table_name,
  9 AS number_of_attributes,
  (SELECT COUNT(*) FROM products) AS number_of_rows
UNION ALL
SELECT
  'ProductLines' AS table_name,
  4 AS number_of_attributes,
  (SELECT COUNT(*) FROM productlines) AS number_of_rows
UNION ALL
SELECT
  'Orders' AS table_name,
  7 AS number_of_attributes,
  (SELECT COUNT(*) FROM orders) AS number_of_rows
UNION ALL
SELECT
  'OrderDetails' AS table_name,
  5 AS number_of_attributes,
  (SELECT COUNT(*) FROM orderdetails) AS number_of_rows
UNION ALL
SELECT
  'Payments' AS table_name,
  4 AS number_of_attributes,
  (SELECT COUNT(*) FROM payments) AS number_of_rows
UNION ALL
SELECT
  'Employees' AS table_name,
  8 AS number_of_attributes,
  (SELECT COUNT(*) FROM employees) AS number_of_rows
UNION ALL
SELECT
  'Offices' AS table_name,
  9 AS number_of_attributes,
  (SELECT COUNT(*) FROM offices) AS number_of_rows;
  
  
--Question 1: Which Products Should We Order More of or Less of?

--Low stock for each product
SELECT
  p.productCode,
  ROUND((
    SELECT SUM(od.quantityOrdered) * 1.0
    FROM orderdetails od
    WHERE od.productCode = p.productCode --Ensures execution by row
  ) / p.quantityInStock, 2) AS lowStock
FROM products p
ORDER BY lowStock DESC
LIMIT 10;

--Product performance for each product
SELECT
  productCode,
  SUM(quantityOrdered * priceEach) AS productPerformance
FROM orderdetails
GROUP BY productCode
ORDER BY SUM(quantityOrdered * priceEach) DESC
LIMIT 10;

--Create CTE to combine previous two queries
WITH lowStockCTE AS (
  SELECT
    p.productCode,
    ROUND((
      SELECT SUM(od.quantityOrdered) * 1.0
      FROM orderdetails od
      WHERE od.productCode = p.productCode --Ensures execution by row
    ) / p.quantityInStock, 2) AS lowStock
  FROM products p
  GROUP BY productCode
  ORDER BY lowStock DESC
  LIMIT 10
),
productPerformanceCTE AS (
  SELECT
    productCode,
    SUM(quantityOrdered * priceEach) AS productPerformance
  FROM orderdetails
  WHERE productCode IN (SELECT productCode FROM lowStockCTE)
  GROUP BY productCode
  ORDER BY productPerformance DESC
  LIMIT 10
)

--Products with high low stock and high product performance (i.e., products we should order more of)
SELECT
  productCode,
  productName,
  productLine
FROM products
WHERE
  productCode IN (
    SELECT productCode
    FROM productPerformanceCTE
  );


--Question 2: How Should We Match Marketing and Communication Strategies to Customer Behavior?

--How much profit each customer generates
SELECT
  o.customerNumber,
  ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS profit
FROM orders o
JOIN orderdetails od
  ON o.orderNumber = od.orderNumber
JOIN products p
  ON od.productCode = p.productCode
GROUP BY o.customerNumber;

--Find top 5 most engaged customers
WITH profitCTE AS (
  SELECT
    o.customerNumber,
    ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS profit
  FROM orders o
  JOIN orderdetails od
    ON o.orderNumber = od.orderNumber
  JOIN products p
    ON od.productCode = p.productCode
  GROUP BY o.customerNumber
)

SELECT
  contactLastName,
  contactFirstName,
  city,
  country,
  pcte.profit AS profit
FROM customers c
JOIN profitCTE pcte
  ON c.customerNumber = pcte.customerNumber
ORDER BY profit DESC
LIMIT 5;

--Find top 5 least engaged customers
WITH profitCTE AS (
  SELECT
    o.customerNumber,
    ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS profit
  FROM orders o
  JOIN orderdetails od
    ON o.orderNumber = od.orderNumber
  JOIN products p
    ON od.productCode = p.productCode
  GROUP BY o.customerNumber
)

SELECT
  contactLastName,
  contactFirstName,
  city,
  country,
  pcte.profit AS profit
FROM customers c
JOIN profitCTE pcte
  ON c.customerNumber = pcte.customerNumber
ORDER BY profit ASC
LIMIT 5;


--Question 3:

--Number of new customers arriving each month
WITH paymentWithYearMonthTable AS (
  SELECT 
    *, 
    CAST(SUBSTR(paymentDate, 1, 4) AS INTEGER) * 100 + CAST(SUBSTR(paymentDate, 6, 7) AS INTEGER) AS yearMonth
  FROM payments p
),
customersByMonthTable AS (
  SELECT p1.yearMonth, COUNT(*) AS numberOfCustomers, SUM(p1.amount) AS total
  FROM paymentWithYearMonthTable p1
  GROUP BY p1.yearMonth
),
newCustomersByMonthTable AS (
  SELECT 
    p1.yearMonth, 
    COUNT(DISTINCT customerNumber) AS numberOfNewCustomers,
    SUM(p1.amount) AS newCustomerTotal,
    (SELECT numberOfCustomers
     FROM customersByMonthTable c
     WHERE c.yearMonth = p1.yearMonth) AS numberOfCustomers,
    (SELECT total
     FROM customersByMonthTable c
     WHERE c.yearMonth = p1.yearMonth) AS total
  FROM paymentWithYearMonthTable p1
  WHERE p1.customerNumber NOT IN (SELECT customerNumber
                                  FROM paymentWithYearMonthTable p2
                                  WHERE p2.yearMonth &lt; p1.yearMonth)
  GROUP BY p1.yearMonth
)

SELECT 
  yearMonth, 
  ROUND(numberOfNewCustomers * 100 / numberOfCustomers, 1) AS numberOfNewCustomersProps,
  ROUND(newCustomerTotal * 100 / total, 1) AS newCustomersTotalProps
FROM newCustomersByMonthTable;

--Average of customer profits
WITH profitCTE AS (
  SELECT
    o.customerNumber,
    ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS profit
  FROM orders o
  JOIN orderdetails od
    ON o.orderNumber = od.orderNumber
  JOIN products p
    ON od.productCode = p.productCode
  GROUP BY o.customerNumber
)

SELECT ROUND(AVG(profit), 2) AS averageProfit
FROM profitCTE;</sql><current_tab id="0"/></tab_sql></sqlb_project>
